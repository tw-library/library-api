group 'com.thoughtworks.librarysystem'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'spring-boot'
apply plugin: 'org.liquibase.gradle'


applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8001"]

ext {
    expectedLineCoverage = 50
    expectedBranchCoverage = 60
}

jar {
    baseName = 'librarysystem-api'
    version = '0.1.0'
}

configurations {
    liquibase

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

loadConfiguration()

def loadConfiguration() {
    def environment = hasProperty('env') ? env : System.getenv('APP_ENV')

    environment = environment != null ? environment : 'development'

    project.ext.environment = environment
    println ">>>>>>> Environment is set to $environment"
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.4.RELEASE")
        classpath "org.postgresql:postgresql:9.3-1100-jdbc4"
        classpath "org.liquibase:liquibase-gradle-plugin:1.2.1"
    }

}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.postgresql:postgresql:9.3-1100-jdbc4")
    compile("org.projectlombok:lombok:1.16.4")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-test")
    compile("org.hibernate:hibernate-core:4.3.6.Final")
    compile('org.atteo.moonshine:liquibase:1.1')
    compile("org.liquibase:liquibase-gradle-plugin:1.2.1")
    compile("org.hsqldb:hsqldb:2.0.0")

    compile("com.fasterxml.jackson.core:jackson-core:2.4.1")
    compile("com.fasterxml.jackson.core:jackson-databind:2.4.1.1")
    compile("com.auth0:java-jwt:2.1.0")

    testCompile 'com.jayway.restassured:rest-assured:2.5.0'
    testCompile 'com.jayway.restassured:spring-mock-mvc:2.5.0'

    testCompile("org.postgresql:postgresql:9.3-1100-jdbc4")

    testCompile group: "junit", name: "junit", version: "4.11"
    testCompile "junit:junit:4.11"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "com.h2database:h2:1.4.182"
    testCompile "javax.servlet:javax.servlet-api:3.0.1"
    testCompile "com.jayway.jsonpath:json-path:0.8.1"
    testCompile "com.jayway.jsonpath:json-path-assert:0.8.1"
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "javax.el:javax.el-api:3.0.0"
    testCompile "org.apache.velocity:velocity:1.6.2"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task copyConfiguration << {
    println "Target environment: $environment"

    copy {
        from "src/main/environment/$environment"
        into "src/main/resources"
        include "*/"
    }
}
processResources.dependsOn copyConfiguration

task stage(dependsOn: ['clean', 'installApp'])

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task checkTestCoverage << {
    def coverageReportPath = "build/reports/jacoco/test/html/index.html"
    def coverageFile = new File(coverageReportPath)
    def matcher = ( coverageFile.text =~ /<tfoot>(.*)<\/tfoot>/ )
    def coverageString = new XmlParser().parseText(matcher[0][0])

    def lineCoverageString = coverageString.tr.td[2].text()
    def branchCoverageString = coverageString.tr.td[4].text()
    def actualLineCoverage=  lineCoverageString.substring(0,lineCoverageString.length() - 1).toInteger()
    def actualBranchCoverage=  branchCoverageString.substring(0,branchCoverageString.length() - 1).toInteger()

    logger.quiet('\n\nCode line coverage is ' +actualLineCoverage+'%')
    logger.quiet('Code branch coverage is ' +actualBranchCoverage+'%')
    logger.quiet('Form more info check '+coverageReportPath+'\n\n')
}

checkTestCoverage.dependsOn jacocoTestReport

test.finalizedBy checkTestCoverage

liquibase {
    activities {

        main {
            driver 'org.postgresql.Driver'
            url 'jdbc:postgresql://localhost:5432/librarydb'
            username 'libraryadmin'
            password 'admin'
            changeLogFile 'changelog.groovy'
            referenceUrl 'jdbc:postgresql://localhost:5432/librarydb2'
            referenceUsername 'libraryadmin'
            referencePassword 'admin'
            changeLogParameters([ myToken: 'myvalue',
                                  second: 'secondValue'])
        }
    }
    runList = 'main'
}
